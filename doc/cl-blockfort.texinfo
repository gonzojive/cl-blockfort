\input texinfo
@setfilename internals.texinfo
@settitle Blockfort

@copying
Copyright @copyright{} 2007 Red Daly
@end copying

@titlepage
@title Blockfort

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex

@node Top
@top Blockfort
@insertcopying
@end ifnottex
     
@chapter Introduction
Blockfort is a low-level, distributed transactional data store
programmed in Common Lisp and intended for use by more abstract
database systems.  There are many forms of databases, from
pointer-based object databases to simple B-Tree stores like Berekely
DB to monstrous black boxes like Oracle's products.  Blockfort
attempts to support a wide range of these high-level database
abstractions and provide all the necessary primitives.

Importantly, Blockfort is distributed database system that is intended
to scale well to many database nodes.  Of course, blockfort supports
single-node operation, but the ability to scale a system is important
and so Blockfort acknowledges a possible distributed nature and
provides the appropriate primitives for high-level paradigms to
operate.

Blockfort guarantees that certain behaviors are ACID compliant in its
own sense and allows applications that call into Blockfort to
guarantee ACID compliance in a way that makes sense for the
application.  ACID transactions guarantee the following properties:

@enumerate
@item Atomicity
-- The transaction executes either all or none of its operations.

@item Consistency
-- The database is in a ``consistent'' state before and after the
transaction executes.

@item Isolation
 -- Concurrent transactions appear to be executing one after another,
and they do not reflect intermediate changes made by each other.

@item Durability
 -- After a transaction has successfully committed, the database will
reflect its changes.
@end enumerate

Atomicity and Durability are almost exclusively the responsibility of
Blockfort, while Isolation and Consistency rely on the interaction of
the database client and Blockfort.  These interactions will become
clearer later in this chapter.

To accomplish ACID compliance, Blockfort relies on two basic
principles: transaction logging for recovering from failures, and a
concurrency scheduler for dealing with concurrently-executing
transactions.  How ACID compliance is achieved in light of the rather
agnostic nature of Blockfort in regards to the higher-level structure
of its data should become clear after reading about blocks,
concurrency control, and the interface between the two in Blockfort.

@section Blocks
@emph{Blocks} are the basic unit of data in Blockfort.  A block is a
vector of contiguous (binary) data that persists after a computer
turns off and on.  Note that a Blockfort block is distinct from a
@emph{disk block}, though the two may correspond physically in certain
cases. The interface to Blockfort does not assume anything about the
structure of blocks or place any extra metadata into blocks when they
are stored on the disk.

Each node in a distributed Blockfort environment has its own
@emph{address space} in which blocks are allocated.  The units of an
address spess are 8-bit bytes.  A block in Blockfort is identified by
its node and offset into its node's address space.  Replication at the
block level is left up to the application.  Replication at the
@emph{node} level may potentially be implemented by Blockfort in the
future (i.e. replicating the entire address space of a node
vs. replicating a single block).

@section Transactions
In Blockfort, a @emph{transaction} is an protocol that wraps a set of
@emph{actions} and guarantees atomicity, consistency, isolation, and
durability.  Many different types and subtypes of transactions exist,
and Blockfort attempts to abstract transactions enough to support many
of the different types of transactions without overgeneralization.

@emph{Lock-based transactions.}  Nearly all concurrent database
systems use locks to some degree to implement transactions, though how
exactly the locking scheme works varies widely.  Two-phase locking
(2PL) guarantees serializability of transactions by requiring that no
lock may be acquired after a single lock has been released.  A tree
protocol for locking requires far less contention for B-Trees by
violating 2PL and allowing locks after unlocks.  In both of these
cases, the locking scheme is pessimistic, acquiring locks as data is
read and written, and releasing the locks either at the end of the
transaction (2PL) or as nodes on the tree are traversed (tree
protocol).

@emph{Optimistic transactions.}  Optimistic transactions assume that
data accesses will not conflict and checks these assumptions by
performing an atomic validation step during commit.  Specific
mechanisms in this league include timestamp methods and validation
methods.  In many implementations of optimistic transactions, locks
are still necessary but only during the commit phase.

@subsection Transaction Protocol
Blockfort attempts to support many classes of transaction with a
generic transaction protocol.  The basic principles of this protocol
are as follows:

@enumerate
@item
A transaction begins with a call to the generic function
@code{store-start-transaction}.

@item
While a transaction is active, actions may be performed on the
database calling the generic function @code{(store-perform-action
store transaction action)}.  
@itemize
@item Eager-locking transactions
like 2PL and the tree-protocol will presumably acquire (and
potentially release) locks as actions are performed.
@item Optimistic transactions
will presumably accumulate read and write objects that will require
some form of validation during the commit phase of the transaction.
@end itemize

@item
A transaction attempts to commit with a call to the generic function
@code{store-commit-transaction}.

@item
A transaction aborts with a call to the generic function
@code{store-rollback-transaction}.  As soon as such a call is made,
the transaction is invalidated and any actions that took place during
the transaction are undone.
@end enumerate

Using this protocol a single Blockfort data store may implement a wide
range of possible transactions.  There are also some built-in
transaction types, but these may be overruled entirely.

@subsection Action protocol
Actions are an abstraction of database operations like reads and
writes.  They may also be more complex actions, such as ``atomic,
conditional read/write'' that encapsulate more complex behavior.

For example, an action as it is passed to @code{store-perform-action}
may be an instance of the built-in class @code{read-block-action} or
@code{write-block-action} which further decompose themselves and
recursively call @code{store-perform-action}.

The action protocol consists of two different components to ensure
that a transaction can handle an action in an ACID-compliant manner:

@enumerate
@item Database updates.
An action may need to update the database and thus needs to provide an
implementation of the update procedure.  Often an action decomposes
into primitive reads and writes.
@item Log updates.
An action needs to ensure that its database updates may be reversed
and serialized into a log entry.
@end enumerate

@subsection Distributed Transactions
Blockfort is a distributed database framework provides a protocol for
communicating custom actions between nodes..  Blockfort uses two-phase
commit (2PC) to perform resilient atomic transactions across many
nodes.

Two-phase commit is a protocol for performing some set of
actions atomically over a number nodes.  There is a single coordinator
of the distributed transaction that send a query to commit to all of
the cohorts (who must also participate in the transaction).  Each
cohort then attempts to fulfill its end of the bargain.  If a cohort
fails, it will return NO to the coordinator; otherwise it will return
YES and write something to its logs to ensure both that, even in the
case of a crash, the cohort can commit the transaction, and also
information to its logs to allow it to revert the partially-fulfilled
transaction.  The coordinator received all of the YES/NO responses
back, and if they are all YES it sends a COMMIT message to each
cohort; otherwise it sends an ABORT.

Actions performed during a transaction may correspond to physical
operations at multiple nodes in the distributed system.  A message
must be sent from one node to another to reques that particular
actions be taken at the destination node.  Thus, for actions that do
not decompose into primitive block read/write actions, the actions
must be made to conform to a message-passing protocol.

Blockfort does not specify a default protocol for communicating
between nodes, though a default implementation is supplied for a
TCP/IP-based communication layer.

TODO what exactly is the specification for this?

@section Concurrency control
Blockfort currently allows concurrency at the level of a single lisp
process.  That means that many threads in a single Common Lisp image
can execute transactions simultaneously.

At present, there is a generic concurrency interface that should allow
for a broad range of transaction implementations on top of Blockfort.



@subsection Lock-based concurrency of BTrees
Btrees are a common, multipurpose data structure and Blockfort
attempts to accomodate the concurrency needs of a BTree so that it may
be implemented efficiently.

When BTrees add an element, the tree is traversed to decide where the
new element belongs given the ordering of the btree.  Once it is
determined where the element belongs, the value is either inserted
into a non-full node, or a node is split and a separation value is
inserted into the parent of the split node.  Once a non-empty node is
seen in the search down the tree for the correct insertion location,
it is known that insertion will not result in a separation value being
placed inside the parent node.

In the case of deletion, if a node is traversed with more than the
minimum number of elements, then we can be sure that it will not be
necessary to restructure the parent.  (See Database Systems, page
964).

The locking scheme that results for tree structures like this is a a
protocol where

@enumerate
@item
A transaction's first lock may be any node in the tree.
@item
To lock a new node, its parent must be locked.
@item
Any node can be unlocked at any time.
@item
A transaction may not relock a node which was previously locked and unlocked.
@end enumerate

@section Logging
Logging allows the database to recover from a crash or aborted
transaction.  Currently the logging scheme used by blockfort is
undo-redo logging.

@chapter Logging
To ensure durability of transactions, Blockfort maintains a disk log
that can recover the entire database using just the log files.

@section Undo/Redo Log
The log mechanism at the moment is an undo/redo log, which has the
following logging rule: @emph{Before modifying any database element X
on disk because of changes made by some transaction T, it is necessary
that the update record appear on the disk}.  In addition, Blockfort
enforces a strict commit rule: @emph{A commit record must be flushed
to disk before the user is informed that a transaction committed}.
The strict commit semantics are necessary for certain applications and
not for others, but we employ it here.


@subsection Undo/Redo Recovery
The following is the algorithm used to recover the database from the
log:



@enumerate
@item
 Maintain a transaction stack (initially nil).

@item
Loop through each log record.  Treat the log records according to
their types:
@enumerate
@item <Begin, txn>.
Push txn onto the transaction stack.  Set the ``ready'' and
``distributed'' flags to false for the given transaction.
@item <Commit, txn>.
Set the committed flag to true for this transaction.  If it is the
earliest on the transaction queue, redo all of its modifications
earliest first.  Then pop it off the transaction queue and repeatedly
inspect the transaction queue like that
@item <Update, txn, ...>.
Push the modification information onto the list of modification
actions for the appropriate txn in the transaction stack.
@item <Ready, txn>.
Set the ready flag for the given transaction to true.
@item <Prepare, txn>.
This indicates the beginning of a distributed part of a transaction
where the current site is the coordinator.  Set the distributed flag
to true.
@end enumerate

@item 


@end enumerate

Atomicity and Durability are almost exclusively the responsibility of
Blockfort, while Isolation and Consistency rely on the interaction of
the database client and Blockfort.  These interactions will become
clearer later in this chapter.

@subsection Undo/Redo Checkpointing
Not implemented yet.  We recover from the beginning of the log.

@subsection Improvements
Right now we have more disk writes than ideal: one for any
modification, one for the modification in the log, and one for the
commit.  The way we determine the previous value for the 'undo'
portion of the log is to read from disk, requiring yet another I/O.
To reduce disk I/Os we should delay flushing the database to file,
allowing us to coalesce all the writes until commit time.  Buffering
reads (or relying purely on Redo logging instead of undo logging)
would also eliminate the need for the additional disk read before each
modification.

@bye
